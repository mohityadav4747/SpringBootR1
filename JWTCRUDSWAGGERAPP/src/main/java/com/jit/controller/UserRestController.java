package com.jit.controller;

import java.security.Principal;
import java.util.List;
import java.util.NoSuchElementException;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;

import com.jit.jwt.JwtUtil;
import com.jit.model.User;
import com.jit.model.UserRequest;
import com.jit.model.UserResponse;
import com.jit.service.IUserService;

@RestController
@RequestMapping("/user")
public class UserRestController {
	
@Autowired
private IUserService service;

@Autowired
private JwtUtil util;

@Autowired
private AuthenticationManager authenticationManager ;

@PostMapping(value = "/save")
public ResponseEntity<String> saveUser(@RequestBody User user) {
	Integer userId=service.saveUserData(user);
	String body="user'"+userId+"' saved";
    return new ResponseEntity<String>(body,HttpStatus.OK);
    
}
//validate un/pwd with db
@RequestMapping(value = "/login",method = RequestMethod.POST)
public ResponseEntity<UserResponse> loginUser(@RequestBody UserRequest request){
		
		  authenticationManager.authenticate(new UsernamePasswordAuthenticationToken(
		  request.getUserName(),request.getPassword()));
		 
	String token=util.generateToken(request.getUserName());
	return  ResponseEntity.ok( new UserResponse(token,"success generated by JIT solutions"));
	
}
  //after login output
@PostMapping("/welcome")
public ResponseEntity<String> accessData(Principal p){
	return ResponseEntity.ok(" welcome "+ p.getName()+" you loggedIn");
}

@GetMapping("/getAll")
public List<User> fetchAllUser(){
	return service.fetchUserData();
}
@PutMapping("/update/{userId}")
public String updateUser(@RequestBody User user, @PathVariable Integer userId) {
	service.updateUserById(user, userId);
	System.out.println("user '"+userId+"'updated");
	return null;
	
	
}


@DeleteMapping("/delete/{userId}")
public String deleteUser(@PathVariable Integer userId,String msg) {
	
	service.deleteUserData(userId);
	return "user'"+userId+"' deleted";
	//return "Register";
}

@GetMapping(value = "/getOne/{userId}")
public ResponseEntity<User> getOneUser(@PathVariable Integer userId) {
	try {
		User user = service.getOneUserData(userId);
		return new ResponseEntity<User>(user, HttpStatus.OK);
	} catch (NoSuchElementException e) {
		return new ResponseEntity<User>(HttpStatus.NOT_FOUND);
	}      
}
}